// Copyright 2017 Volker Sorge
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/**
 * @fileoverview Nemeth message file.
 *     (This should eventually move from being a locale!)
 *
 * @author volker.sorge@gmail.com (Volker Sorge)
 */
goog.provide('sre.Locale.nemeth');

goog.require('sre.Locale');
goog.require('sre.Numbers.nemeth');


/**
 * Removes English indicator from a simple letter.
 * @param {string} letter The letter with indicator.
 * @return {string} The cleaned letter if it was English without font.
 */
let simpleEnglish = function(letter) {
  return letter.match(RegExp(
      '^' + sre.Locale.nemeth.ALPHABET_PREFIXES.languagePrefix.english)) ?
      letter.slice(1) : letter;
};


// Note that the cap here is a number indicator as caps are already included in
// the alphabets. All we need to do is remove the English indicator in case
// there is no font indicator. For the parenthesised fonts we don't need number
// indicator either.
let postfixCombiner = function(letter, font, number) {
  letter = simpleEnglish(letter);
  return font ? letter + font : letter;
};


let germanCombiner = function(letter, font, cap) {
  return font + simpleEnglish(letter);
};


let embellishCombiner = function(letter, font, number) {
  letter = simpleEnglish(letter);
  return font + (number ? number : '') + letter + 'та╗';
};


let doubleEmbellishCombiner = function(letter, font, number) {
  letter = simpleEnglish(letter);
  return font + (number ? number : '') + letter + 'та╗та╗';
};


// Font is the start parenthesis.
// Number is the number indicator which is ignored.
// English characters have language indicator removed.
let parensCombiner = function(letter, font, number) {
  letter = simpleEnglish(letter);
  return font + letter + 'та╛';
};


/**
 * @type {sre.Locale.Messages}
 */
sre.Locale.nemeth = {

  MS: {
    FRACTION_REPEAT: 'таа',
    FRACTION_START: 'та╣',
    FRAC_V: 'та╣',
    FRAC_B: 'Frac',
    FRAC_S: 'Frac',
    END: 'таа',
    FRACTION_OVER: 'таМ',
    TWICE: 'Twice',
    NEST_FRAC: 'Nest',
    ENDFRAC: 'та╝',
    FRACTION_END: 'та╝',
    SUPER: 'таШ',
    SUB: 'та░',
    SUP: 'таШ',
    SUPERSCRIPT: 'таШ',
    SUBSCRIPT: 'та░',
    BASELINE: 'таР',
    BASE: 'таР',
    NESTED: 'таи',
    NEST_ROOT: 'Nest',
    STARTROOT: 'таЬ',
    ENDROOT: 'та╗',
    ROOTINDEX: 'таг',
    ROOT: 'таи',
    INDEX: 'таг',
    UNDER: 'тай',
    UNDERSCRIPT: 'тай',
    OVER: 'таг',
    OVERSCRIPT: 'таг'
  },

  MS_FUNC: {
    FRAC_NEST_DEPTH: function(node) {return false;},
    RADICAL_NEST_DEPTH: function(count) { return ''; },
    COMBINE_ROOT_INDEX: function(postfix, index) {return postfix;},
    FONT_REGEXP: function(font) {return RegExp('^' + font);}
  },

  MS_ROOT_INDEX: { },

  FONT: {
    // TODO: Some font translations:
    //
    // Caligraphic: Currently translated as script. Caligraphic bold as script
    //              bold (vs. bold-script)
    //
    // Double Struck: Currently translated as bold. Double-struck italic is
    //                therefore the same as bold italic.
    //
    // Oldstyle and Monospace: Currently ignored.
    // Normal: is currently just empty.
    'bold': 'та╕',
    'bold-fraktur': ['та╕таАта╕', germanCombiner],
    'bold-italic': 'та╕таи',
    'bold-script': 'та╕таИ',
    'caligraphic': 'таИ',
    'caligraphic-bold': 'таИта╕',
    'double-struck': 'таИ',
    'double-struck-italic': 'та╕таи',
    'fraktur': ['та╕', germanCombiner],
    'fullwidth': '',
    'italic': 'таи',
    'monospace': '',
    'normal': '',
    'oldstyle': '',
    'oldstyle-bold': 'та╕',
    'script': 'таИ',
    'sans-serif': 'таатаи',
    'sans-serif-italic': 'таатаитаи',
    'sans-serif-bold': 'таатаита╕',
    'sans-serif-bold-italic': 'таатаита╕таи',
    'unknown': ''
  },

  EMBELLISH: {
    // Embellishments
    // TODO: Here we need specialist combiners!
    'super': ['таШ', germanCombiner],
    'sub': ['та░', germanCombiner],
    'circled': ['талтаЙта╕тал', embellishCombiner],
    'parenthesized': ['та╖', parensCombiner],
    'period': ['та╕та▓', postfixCombiner],
    'negative-circled': ['талта╕таЙта╕тал', embellishCombiner],
    'double-circled': ['талтаЙта╕талталтаЙта╕тал', doubleEmbellishCombiner],
    'circled-sans-serif': ['талтаЙта╕талтаатаи', embellishCombiner],
    'negative-circled-sans-serif': ['талта╕таЙта╕талтаатаи', embellishCombiner],
    'comma': ['таа', postfixCombiner],
    'squared': ['талта▓та╕тал', embellishCombiner],
    'negative-squared': ['талта╕та▓та╕тал', embellishCombiner]
  },

  ROLE: {
    // Infixoperators
    'addition': 'addition',
    'multiplication': 'multiplication',
    'subtraction': 'subtraction',
    'division': 'division',
    // Relations.
    'equality': 'equality',
    'inequality': 'inequality',
    'element': 'element',
    'arrow': 'arrow',
    // Roles of matrices or vectors.
    'determinant': 'determinant',
    'rowvector': 'row vector',
    'binomial': 'binomial',
    'squarematrix': 'square matrix',
    // Roles of rows, lines, cells.
    'multiline': 'multiple lines',
    'matrix': 'matrix',
    'vector': 'vector',
    'cases': 'case statement',
    'table': 'table',
    // Unknown
    'unknown': 'unknown'
  },


  ENCLOSE: {
    'longdiv': 'long division',
    'actuarial': 'actuarial symbol',
    'radical': 'square root',
    'box': 'таЧ',
    'roundedbox': 'rounded box',
    'circle': 'таЙ',
    'left': 'left vertical-line',
    'right': 'right vertical-line',
    'top': 'overbar',
    'bottom': 'underbar',
    'updiagonalstrike': 'crossout',
    'downdiagonalstrike': 'crossout',
    'verticalstrike': 'vertical strikeout',
    'horizontalstrike': 'crossout',
    'madruwb': 'Arabic factorial symbol',
    'updiagonalarrow': 'diagonal arrow',
    'phasorangle': 'так',
    // Unknown
    'unknown': 'long division'
  },

  REGEXP: {
    TEXT: 'a-zA-Z',
    NUMBER: '((\\d{1,3})(?=(,| ))((,| )\\d{3})*(\\.\\d+)?)|^\\d*\\.\\d+|^\\d+',
    DECIMAL_MARK: '.',
    DIGIT_GROUP: ',',
    JOINER_SUBSUPER: '',
    JOINER_FRAC: ''
  },

  NAVIGATE: {
    COLLAPSIBLE: 'collapsible',
    EXPANDABLE: 'expandable',
    LEVEL: 'Level'
  },

  NUMBERS: sre.Numbers.nemeth.NUMBERS,

  ALPHABETS: {
    latinSmall: [
      'та░таБ', 'та░таГ', 'та░таЙ', 'та░таЩ', 'та░таС', 'та░таЛ', 'та░таЫ',
      'та░таУ', 'та░таК', 'та░таЪ', 'та░таЕ', 'та░таЗ', 'та░таН',
      'та░таЭ', 'та░таХ', 'та░таП', 'та░таЯ', 'та░таЧ', 'та░таО', 'та░таЮ',
      'та░тае', 'та░таз', 'та░та║', 'та░тан', 'та░та╜', 'та░та╡'
    ],
    latinCap: [
      'та░таатаБ', 'та░таатаГ', 'та░таатаЙ', 'та░таатаЩ', 'та░таатаС',
      'та░таатаЛ', 'та░таатаЫ', 'та░таатаУ', 'та░таатаК', 'та░таатаЪ',
      'та░таатаЕ', 'та░таатаЗ', 'та░таатаН', 'та░таатаЭ', 'та░таатаХ',
      'та░таатаП', 'та░таатаЯ', 'та░таатаЧ', 'та░таатаО', 'та░таатаЮ',
      'та░таатае', 'та░таатаз', 'та░таата║', 'та░таатан', 'та░таата╜', 'та░таата╡'
    ],
    greekSmall: [
      'таитал',  // This is here as it is small.
      'таитаБ', 'таитаГ', 'таитаЫ', 'таитаЩ', 'таитаС', 'таита╡', 'таита▒', 'таита╣',
      'таитаК', 'таитаЕ', 'таитаЗ', 'таитаН', 'таитаЭ', 'таитан', 'таитаХ', 'таитаП', 'таитаЧ',
      'таитаИтаО', 'таитаО', 'таитаЮ', 'таитае', 'таитаИтаЛ', 'таитап', 'таита╜', 'таита║',
      // Symbols below
      'таИтаЩ', 'таитаС', 'таитаИта╣', 'таитаЕ', 'таитаЛ', 'таитаЧ', 'таитаП'
    ],
    greekCap: [
      'таитаатаБ', 'таитаатаГ', 'таитаатаЫ', 'таитаатаЩ', 'таитаатаС', 'таитаата╡', 'таитаата▒', 'таитаата╣',
      'таитаатаК', 'таитаатаЕ', 'таитаатаЗ', 'таитаатаН', 'таитаатаЭ', 'таитаатан', 'таитаатаХ', 'таитаатаП', 'таитаатаЧ',
      'таитаата╣',  // Theta symbol
      'таитаатаО', 'таитаатаЮ', 'таитаатае', 'таитаатаЛ', 'таитаатап', 'таитаата╜', 'таитаата║'
    ]
  },

  ALPHABET_TRANSFORMERS: {
    digit: {
      default: sre.Numbers.nemeth.numberToWords
    },
    letter: {
      default: function(n) {return n;}
    }
  },

  ALPHABET_PREFIXES: {
    capPrefix: {default: ''},
    smallPrefix: {default: ''},
    digitPrefix: {default: 'та╝'},
    languagePrefix: {
      greek: 'таи',
      english: 'та░',
      german: 'та╕',
      hebrew: 'таатаа',
      number: 'та╝'
    },
  },

  ALPHABET_COMBINER: function(letter, font, number) {
    return font ? (font + number + letter) : simpleEnglish(letter);
  }

};
// <mn>ЁЭЯЧ</mn>
// <mn mathvariant="bold">9</mn>
